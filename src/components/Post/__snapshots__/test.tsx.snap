// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Post /> should render header, excerpt, cover, metadata and post 1`] = `
.c5 {
  font-size: 1.6rem;
  color: #AAAAAA;
  font-style: italic;
}

.c5 .categories span::after {
  content: ', ';
}

.c5 .categories span:last-child::after {
  content: '';
}

.c5 a {
  color: #dc143c;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: all 300ms ease-in-out;
  transition: all 300ms ease-in-out;
}

.c5 a:hover {
  -webkit-filter: brightness(50%);
  filter: brightness(50%);
}

.c2 {
  color: #000000;
  font-size: 6.4rem;
  text-transform: none;
  line-height: 1.2;
}

.c0 {
  padding-bottom: 4.0rem;
  margin-bottom: 4.0rem;
  border-bottom: 0.1rem solid #DDDDDD;
}

.c0 .c1 {
  margin: 0;
  margin-bottom: 2.4rem;
}

.c3 {
  font-size: 2.4rem;
  margin: 2.4rem 0;
}

.c4 {
  max-width: 100%;
  display: block;
  margin-bottom: 2.4rem;
}

.c6 {
  font-size: calc(1.6rem + 0.2rem);
  line-height: 1.5;
}

.c6 p {
  margin: 2.4rem 0;
}

.c6 a,
.c6 a:visited,
.c6 a:link {
  color: #dc143c;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: all 300ms ease-in-out;
  transition: all 300ms ease-in-out;
}

.c6 a:hover {
  -webkit-filter: brightness(50%);
  filter: brightness(50%);
}

.c6 code {
  font-family: monospace;
  color: #dc143c;
  font-size: 1.6rem;
  background: #DDDDDD;
  padding: 0.2rem;
  margin: 0.2rem;
}

.c6 pre {
  background: #000000;
  padding: 2.4rem;
  font-family: monospace;
  color: #FFFFFF;
  margin: 2.4rem 0;
  width: 100%;
  overflow-x: auto;
  font-size: 1.6rem;
}

.c6 pre code {
  color: inherit;
  background: inherit;
}

.c6 img {
  max-width: 100%;
}

.c6 .image {
  background: #DDDDDD;
  line-height: 0;
  margin: 2.4rem 0;
}

.c6 .image figcaption {
  font-size: 1.6rem;
  padding: 1.6rem;
  text-align: center;
  line-height: 1.3;
}

.c6 .image-style-side {
  max-width: 50%;
  float: right;
  margin: 2.4rem 0;
}

.c6 hr {
  border: none;
  border-bottom: 0.1rem solid #DDDDDD;
}

.c6 ul,
.c6 ol {
  margin: 2.4rem 4.0rem;
}

.c6 .table {
  width: 100%;
  overflow: hidden;
  overflow-x: auto;
}

.c6 table {
  width: 100%;
  border-collapse: collapse;
  margin: 2.4rem 0;
}

.c6 table td,
.c6 table th {
  padding: 1.6rem;
  border: 0.1rem solid #DDDDDD;
}

.c6 blockquote {
  border-left: 0.5rem solid #dc143c;
  color: #AAAAAA;
  -webkit-filter: brightness(80%);
  filter: brightness(80%);
  padding-left: 2.4rem;
  font-style: italic;
  margin: 2.4rem;
}

@media (max-width:768px) {
  .c2 {
    font-size: 4.0rem;
  }
}

@media (max-width:768px) {
  .c6 {
    font-size: 2rem;
  }

  .c6 .image-style-side {
    max-width: 100%;
    float: none;
    margin: 0;
  }
}

<div>
  <article
    class=""
  >
    <header
      class="c0"
    >
      <h1
        class="c1 c2"
      >
        Como utilizar useState e suas vantagens
      </h1>
      <p
        class="c3"
      >
        O Hook de Efeito, useEffect, adiciona a funcionalidade de executar efeitos colaterais através de um componente funcional. 
Assim quando atualizar algum dado na página, os dados que estão ligados a ele também são alterados.
      </p>
      <img
        alt="Como utilizar useState e suas vantagens"
        class="c4"
        src="https://res.cloudinary.com/marlondener/image/upload/v1626378714/react_eb1ec86784.png"
      />
      <div
        class="c5"
      >
        <p>
          <span>
            Por
          </span>
          <a
            href="/author/marlon-dener"
          >
            Marlon Dener
          </a>
          <span
            class="separator"
          >
             | 
          </span>
          <time
            datetime="2021-01-22"
          >
            21 de jan. de 2021
          </time>
          <span
            class="categories"
          >
            <span>
              <a
                href="/category/react"
              >
                React
              </a>
            </span>
          </span>
        </p>
      </div>
    </header>
    <div
      class="c6"
    >
      <p>
        Componentes funcionais são alguns dos componentes mais comumente usados ​​no 
        <strong>
          ReactJS
        </strong>
        . A maioria dos desenvolvedores prefere usar componentes funcionais em vez de componentes baseados em classe pela simples razão de que os componentes funcionais requerem menos codificação (por parte do desenvolvedor). No entanto, dois recursos principais para a classe são perdidos quando se passa com um componente funcional - um estado dedicado que persiste por meio de chamadas de renderização, bem como o uso de funções de ciclo de vida para controlar como o componente se parece e se comporta em estágios separados de seu ciclo de vida.
      </p>
      <p>
        Veja abaixo como iniciar com o 
        <strong>
          useState
        </strong>
        :
      </p>
      <pre>
        <code
          class="language-plaintext"
        >
          import React, { useState } from 'react';
 
function App() {
const click = useState('GeeksForGeeks');
return (
    &lt;h1&gt;Welcome to {click}&lt;/h1&gt;
);
}
 
export default App;
        </code>
      </pre>
      <p>
        Desde a versão 16.8, um novo recurso chamado hooks foi adicionado ao ReactJS que expôs os vários recursos dos componentes baseados em classe. Os dois mais usados ​​são o useState (), que permite que componentes funcionais tenham um estado dedicado próprio, e o useEffect (), que permite que componentes funcionais manipulem elementos DOM antes de cada renderização (quase como se fosse fazer em funções de ciclo de vida). O useState () permite declarar uma variável de estado dentro de uma função. Deve-se observar que um uso de useState () só pode ser usado para declarar uma variável de estado.
      </p>
      <figure
        class="media"
      >
        <oembed
          url="https://www.youtube.com/watch?v=_ggyWGZODIM"
        />
      </figure>
      <p>
        <span
          style="color:rgb(0,0,0);"
        >
          O Hook de Efeito, 
        </span>
        <code>
          useEffect
        </code>
        <span
          style="color:rgb(0,0,0);"
        >
          , adiciona a funcionalidade de executar efeitos colaterais através de um componente funcional. Segue a mesma finalidade do 
        </span>
        <code>
          componentDidMount
        </code>
        <span
          style="color:rgb(0,0,0);"
        >
          , 
        </span>
        <code>
          componentDidUpdate
        </code>
        <span
          style="color:rgb(0,0,0);"
        >
          , e 
        </span>
        <code>
          componentWillUnmount
        </code>
        <span
          style="color:rgb(0,0,0);"
        >
           em classes React, mas unificado em uma mesma API. Assim trazendo muitos ganhos para os desenvolvedores.
        </span>
      </p>
      <p>
        <span
          style="color:rgb(0,0,0);"
        >
          Ver mais na documentação do React: 
        </span>
        <a
          href="https://pt-br.reactjs.org/docs/hooks-overview.html"
        >
          <span
            style="color:rgb(0,0,0);"
          >
            https://pt-br.reactjs.org/docs/hooks-overview.html
          </span>
        </a>
      </p>
    </div>
  </article>
</div>
`;
